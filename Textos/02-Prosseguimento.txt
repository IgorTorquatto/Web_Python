Na pasta migrations criamos histórico para o banco de dados.
Quando criamos nosso app, devemos ir na pasta do *projeto* , em settings, e adicionar seu nome em INSTALLED APPPS.
Ainda no projeto, em  TEMPLATES devemos adicionar no array DIR o nome 'templates' que será um arquivo criado no nosso app posteriormente

Nos "templates" que colocamos nos settings do projeto , mais especificamente em DIRS dentro dos TEMPLATES, o arquivo "templates" será criado dentro da nossa aplicação e nele que teremos o html da página

Temos que dar os comandos no mesmo diretório que está o arquivo "manage.py" , que é o diretório do nosso projeto.
Logo, para rodar o servidor damos o comando:
python manage.py runserver

Para parar o servidor - > Control + C

Lembrar de mudar o Debug , em settings para False
E mudar o ALLOWED HOSTS para ['*'] para testar

LANGUAGE_CODE -> Alterar para 'pt-br'

Views :

Estão nas aplicações. Lá nós criamos funções que recebem requests e retornamos a renderização html.
Criamos duas defs para exemplo : index e contato.

Porém não foi criado nenhuma rota para dar acesso a essas views e isso é feito no arquivo urls.


Urls:

Temos que importar os views do nosso app
Logo no exemplo:
Em urls.py

from core.views import index,contato

Sendo que index e contato foram as funções que fizemos para renderizar cada html.

Em urlpatterns colocamos o path para nossas views
Exemplo:

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',index),
    path('contato',contato)
]

-Lembrar de deixar o debug em settings em "True"
Perceba que foi criado o path para index e para contato.
Porém ainda não temos templates html criados 

Não é ideal criar todos os paths url no arquivo urls.py do projeto principal, porque considerando que vamos ter que fazer várias aplicações , colocar cada path de cada uma delas geraria algo enorme.

Para organizar melhor escrevemos no arquivo urls.py do PROJETO:

-importar o include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include('core.urls')),
]

Na segunda linha de urlpatterns estamos definindo um path que será alocado posteriormente em core.urls que é onde fica nosso app.
Sendo que na aplicação não há o arquivo urls, porém podemos criá-lo.


Urls na Aplicação:

Na aplicação core , exemplo , criamos o arquivo urls.py e nele :

Escrevemos:

from django.urls import path

from .views import index, contato

urlpatterns = [
    path(' ',index),
    path('contato',contato)
]

Ou seja, criamos cada path na prórpia aplicação.

Templates:

Na nossa aplicação criamos uma pasta "templates"
Dentro da pasta criamos os arquivos html.
Como tínhamos criado como exemplo o index e o contato e já estavam configurados na nossa views.py do próprio app, vamos criar ambos agora nos templates do próprio app

Nas urls do app temos que colocar o caminho para cada rota criada.


urlpatterns = [
    path('',index), #raiz (endereço principal) obs: Aspas sem espaço
    path('contato',contato)
]

Lembrando que na urls do projeto já tínhamos dado o include em "core.urls" sendo que core é o nosso app e é justamente
o código que está acima.

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include('core.urls')),
]

Portanto, agora com os views e as urls configuradas e os templates criados , é só rodar o servidor e olhar a alteração em cada path.

Recurso importante:

Como nós sabemos, as views de cada app são em python, então podemos usar os recursos da linguagem para dentro dos nosso templates.
Ex:Nas views vamos criar uma varíável "context" e dar um return nela da seguinte forma:

def index (request):
    context = {
        'curso': 'Programação Web com Django'
    }
    return render(request,'index.html',context)

No nosso template index , para usarmos essa variável :
-Dupla chaves-:

<p>{{curso}}</p>


Models dos Apps:

Modelo de dados

Exemplo: criamos um modelo de dados para representar um onjeto do tipo Produto com nome,preço e estoque
Todos eles tem models específicos como : Char,Decimal e Integer.

Ex:

class Produto(models.Model):
    nome = models.CharField('Nome',max_length=100)
    preco = models.DecimalField('Preço',decimal_places=2,max_digits=8)
    estoque = models.IntegerField('Quantidade em Estoque')


Migrations:

Estão dentro dos apps.

Criar:
comando -> python manage.py makemigrations

Pega todos os modelos das aplicações existentes ,e adicionados em INSTALLED APPS em settings, e cria uma migration para cada app.

O que são as migrations?
Migrations é basicamente uma forma de versionar o seu banco de dados.

Ou seja o django já cria um banco de dados para nós.

Por padrão, sqllite3 está em settings do projeto, em DATABASES.

Quando rodamos o comando "python manage.py makemigrations" cria-se um arquivo "initial" em migrations.
Esse arquivo serve para gerenciar as alterações do banco de dados.


Executar:

comando -> python manage.py migrate

Db Browser:

No app DB browser do Sql lite3 abrimos a pasta do nosso projeto, e terá um arquivo "db.sqlite3"
Nele podemos ver que em "core_produto" temos um banco de dados para a migration que criamos.
Porém não cadastramos nenhum dado ainda.


Migrations:

Vamos criar uma nova:

Migrations do app:

class Clientes(models.Model):
    nome = models.CharField("Nome", max_length = 100)
    nome = models.CharField("Sobrenome", max_length = 100)
    email = models.EmailField("E-mail",max_length = 100)

Comando na pasta do projeto -> python manage.py makemigrations
